// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (46ac0fa0).
//
// f:\c++ projects\cqg_server\cqg_server\cqg_server\cqg.trader.services.cel.host.activex.tli
//
// Wrapper implementations for Win32 type library C:\Program Files (x86)\CQG\CQG Trader\Bin\CQG.Trader.Services.CEL.Host.ActiveX.tlb
// compiler-generated file created 01/31/15 at 14:43:10 - DO NOT EDIT!

#pragma once

//
// interface ICELHost wrapper method implementations
//

inline HRESULT ICELHost::Logon ( _bstr_t name, _bstr_t password, VARIANT_BOOL isDemoLogon ) {
    HRESULT _hr = raw_Logon(name, password, isDemoLogon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICELHost::Logoff ( ) {
    HRESULT _hr = raw_Logoff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum LogonState ICELHost::GetLogonState ( ) {
    enum LogonState _result;
    HRESULT _hr = get_LogonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ICQGCELPtr ICELHost::CreateCQGCEL ( ) {
    struct ICQGCEL * _result = 0;
    HRESULT _hr = raw_CreateCQGCEL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICQGCELPtr(_result, false);
}

inline HRESULT ICELHost::OneTimePasswordResponse ( _bstr_t oneTimePassword ) {
    HRESULT _hr = raw_OneTimePasswordResponse(oneTimePassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICELHost::ChangePassword ( _bstr_t oldPassword, _bstr_t newPassword ) {
    HRESULT _hr = raw_ChangePassword(oldPassword, newPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ICELHostEvent wrapper method implementations
//

inline HRESULT ICELHostEvent::LogonStateChanged ( enum LogonState LogonState ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", LogonState);
}

inline HRESULT ICELHostEvent::ErrorReceived ( _bstr_t message ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)message);
}

inline HRESULT ICELHostEvent::OneTimePasswordRequest ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT ICELHostEvent::PasswordChangeRequest ( ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
