#pragma once

#ifdef P2EREPLSTORAGE_EXPORTS
#define P2EREPLSTORAGE_API P2_API_EXPORTS
#else
#define P2EREPLSTORAGE_API P2_API_EXPORTS
#endif

#include "../../P2eReplCommon/Include/P2eReplTypes.h"
#include "./IP2eReplStorage.h"


#ifdef  __cplusplus
extern "C" {
#endif

//options for P2eReplStorageCreate
#define P2EREPL_STORAGE_FAIL_IF_EXIST				0x0000 //default
#define P2EREPL_STORAGE_DROP_IF_EXIST				0x0001
#define P2EREPL_STORAGE_SKIP_IF_EXIST				0x0002

//option for P2eReplStorageClearOldRev
#define P2EREPL_STORAGE_FAST_CLEAR                  0x0000 //default
#define P2EREPL_STORAGE_CLEAR_AND_CLEAN             0x0001


class IP2eReplStorage;

typedef IP2eReplStorage* P2EREPL_STORAGE_HANDLE;

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageStartup();
P2EREPLSTORAGE_API void  P2CALLSPEC P2eReplStorageCleanup();

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageCreate(const char* connStr, UINT32 flag);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageDelete(const char* connStr);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageOpen(const char* connStr, P2EREPL_STORAGE_HANDLE* ppStorage);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageClose(P2EREPL_STORAGE_HANDLE hStorage);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageDuplicateHandle(P2EREPL_STORAGE_HANDLE hSrc, P2EREPL_STORAGE_HANDLE* ppDest);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageLoad(P2EREPL_STORAGE_HANDLE hStorage);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageTruncate(P2EREPL_STORAGE_HANDLE hStorage);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageBeginTransaction(P2EREPL_STORAGE_HANDLE hStorage);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageCommit(P2EREPL_STORAGE_HANDLE hStorage);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageRollback(P2EREPL_STORAGE_HANDLE hStorage);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageInsert(P2EREPL_STORAGE_HANDLE hStorage, TEReplRec* pRec);
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageInsertP(P2EREPL_STORAGE_HANDLE hStorage, const TEReplRec* pRec);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageEnumRecords(P2EREPL_STORAGE_HANDLE hStorage, P2EREPL_REVISION_TYPE lowRev, P2EREPL_REVISION_TYPE highRev, P2EREPL_ENUM_CALLBACK cb, void* cbParam);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageClearOldRev(P2EREPL_STORAGE_HANDLE hStorage, P2EREPL_REVISION_TYPE maxRev, UINT32 flag);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageClearAll(P2EREPL_STORAGE_HANDLE hStorage, UINT32 flag);

P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageGetNextRev(P2EREPL_STORAGE_HANDLE hStorage, P2EREPL_REVISION_TYPE* pRev);

// Устанавливает callback, который будет вызван после флаша данных на диск. Значение NULL означает удаление текущего коллбэка.
P2EREPLSTORAGE_API P2ERR P2CALLSPEC P2eReplStorageSetOnFlushCallback(P2EREPL_STORAGE_HANDLE hStorage, P2EREPL_ONFLUSH_CALLBACK cb, void * cbParam);

#ifdef  __cplusplus
}
#endif

